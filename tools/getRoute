#!/usr/bin/python3

import sys
import argparse
import urllib.request
import urllib.parse
import csv
import os
import logging
import json

import osm2geojson

# The queries are documented here: https://github.com/roataway/web-ui/tree/master/src/data
QUERY_SEGMENTS = "https://overpass-api.de/api/interpreter?data=relation%%20%%28%s%%29%%3B%%0A%%3E%%3E%%3B%%0Away._%%3B%%0Aout%%20geom%%3B"
QUERY_STATIONS = "https://overpass-api.de/api/interpreter?data=relation%%20%%28%s%%29%%3B%%0A%%3E%%3E%%3B%%0Anode._%%20%%5Bpublic_transport%%3Dplatform%%5D%%3B%%0Aout%%20geom%%3B"

TEMPLATE_SEGMENTS = "route_%s_segments.json"
TEMPLATE_STATIONS = "route_%s_stations.json"

log = logging.getLogger('route')

def get_url(url):
    """Retrieve the body of a page given by the URL
    :param url: str
    :returns: str, the payload"""
    with urllib.request.urlopen(url) as f:
        return f.read().decode('utf-8')


def save_route(upstream_id, osm_relation, target_path):
    """Save a given route to a GeoJSON file.
    :param upstream_id: int, the identifier of the route in the upstream
                        tracking system.
    :param osm_relation: int, the identifier of the route in OpenStreetMap.
    :param target_path: str, directory to save to, the file name follows the
                        conventions given in the src/data.
    :returns: None"""
    segments = get_url(QUERY_SEGMENTS % osm_relation)
    stations = get_url(QUERY_STATIONS % osm_relation)


    with open(os.path.join(target_path, TEMPLATE_SEGMENTS % upstream_id), 'w') as f:
        geojson_segments = osm2geojson.xml2geojson(segments)
        geojson_segments = json.dumps(geojson_segments, indent=4)
        f.write(geojson_segments)

    with open(os.path.join(target_path, TEMPLATE_STATIONS % upstream_id), 'w') as f:
        geojson_stations = osm2geojson.xml2geojson(stations)
        geojson_stations = json.dumps(geojson_stations, indent=4)
        f.write(geojson_stations)


def process_csv(csv_path, target_path):
    """Retrieve and store all routes in a given CSV file, the CSV header is
    `id_upstream, name_concise, name_long, osm_relation`
    :param csv_path: str, path to CSV with list of routes
    :param target_path: str, directory to save files to"""
    with open(csv_path) as csv_file:
        reader = csv.DictReader(csv_file)
        for row in reader:
            log.info('Processing route %s, `%s`', row['name_concise'], row['name_long'])
            save_route(row['id_upstream'], row['osm_relation'], target_path)




if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG,
                        format='%(levelname)5s - %(message)s')
    parser = argparse.ArgumentParser(description='Retrieve route-related meta-data from OpenStreetMaps')
    parser.add_argument("--csv", help="Get all routes specified in a CSV file")
    parser.add_argument("--dst", help="Destination directory where to write the data",
                        default=".")
    parser.add_argument("-r", "--route", help="Retrieve a specific route, identified by its OpenStreetMap relation id. This overrides --csv.")

    args = parser.parse_args()

    if args.csv:
        log.info('Processing all routes from %s', args.csv)
        process_csv(args.csv, args.dst)
    elif args.route:
        log.info('Processing single route specified by relation %s', args.route)
        save_route(args.route, args.route, args.dst)
    else:
        parser.print_help()
        sys.exit()

    log.info('Done')
